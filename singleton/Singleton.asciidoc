== Singleton Pattern C# Source Code

.SingletonNotThreadSafe.cs
[source,c#]
----
public sealed class Singleton
{
    private static Singleton instance = null;   <1>

    private Singleton()
    {
    }

    public static Singleton Instance
    {
        get
        {
            if (instance == null)   <2>
            {
                instance = new Singleton(); <3>
            }
            return instance;    <4>
        }
    }
}

<1> Create instance reference with static keyword.
<2> If there is no other instance.
<3> Create an instance.
<4> Return created instance.  

----

=== UML Diagram

image::SingletonNotThreadSafe.png[Class1,300,400]

.Singleton.cs
[source,c#]
----
class Singleton
    {
        static void Main(string[] args)
        {
            GameSun sun1 = GameSun.Instance;    <1>
            GameSun sun2 = GameSun.Instance;    <1>

            sun1.sunName = "sun1";
            Thread thr1 = new Thread(new ThreadStart(sun1.Rise));   <2> 
            thr1.Start();   <3>
            sun2.sunName = "sun2";
            Thread thr2 = new Thread(new ThreadStart(sun2.Rise));   <2>
            thr2.Start();   <3>
        }
    }

    public sealed class GameSun
    {
        public string sunName { get; set; }

        private GameSun()   <4>
        {
        }

        private static readonly Lazy<GameSun> gameSun = new Lazy<GameSun>(() => new GameSun()); <5>

        public static GameSun Instance  <6>
        {
            get
            {
                return gameSun.Value;
            }
        }

        public void Rise()  <7>
        {
            for(int i = 0; i < 100; i++)
            {
                Console.WriteLine(sunName + " raised!");
            }
        }
    }

<1> Create an instance.
<2> Create a thread.
<3> Start thread.
<4> Private constructor.
<5> Create thread safe sinleton instance with Lazy.
<6> Return singleton instance.
<7> Looking for thread's sunName value change.
----


=== UML Diagram

image::Singleton.png[Class1,300,400]

