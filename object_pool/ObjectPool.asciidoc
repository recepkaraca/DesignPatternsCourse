== Factory Pattern C# Source Code

.ObjectPool.cs
[source,c#]
----
    public class BookPool
    {
        private static Lazy<BookPool> instance
            = new Lazy<BookPool>(() => new BookPool()); <1>
        public static BookPool Instance { get; } = instance.Value;  <2>

        private const int defaultSize = 5;  <3>
        private ConcurrentBag<Book> _bag = new ConcurrentBag<Book>();   <4>
        private volatile int _currentSize;
        private volatile int _counter;
        private object _lockObject = new object();  <5>

        private BookPool()
            : this(defaultSize)
        {
        }
        private BookPool(int size)
        {
            _currentSize = size;
        }

        public Book AcquireObject()
        {
            if (!_bag.TryTake(out Book item))   <6>
            {
                lock (_lockObject)
                {
                    if (item == null)
                    {
                        if (_counter >= _currentSize)
                            throw new Exception();

                        item = new RequestBook();
                        _counter++;

                    }
                }

            }

            return item;    <6>
        }

        public void ReleaseObject(Book item)
        {
            _bag.Add(item); <7>
        }
    }


    public abstract class Book
    {
        public abstract string GatherBook();
    }
    internal class RequestBook : Book
    {
        public override string GatherBook()
        {
            Thread.Sleep(1000);
            return "Gathering book with RequestBook...";
        }
    }


    class ObjectPoolRun
    {
        public static void Main(string[] args)
        {
            int counter = 0;
            Parallel.For(0, 100, (i, loopState) =>
            {
                Book book;
                Exception e = null;
                do
                {
                    try
                    {
                        book = BookPool.Instance.AcquireObject();   <8>
                        Console.WriteLine("Thread " + Thread.CurrentThread.GetHashCode() + " : " + book.GatherBook() + " Instance id : " + book.GetHashCode());
                        BookPool.Instance.ReleaseObject(book);  <9>
                        e = null;
                        counter++;
                    }
                    catch (Exception ex)    <10>
                    {
                        Thread.Sleep(1000);
                        Console.WriteLine("Waiting...");
                        e = ex;
                    }
                } while (e != null);
            });

            Console.WriteLine("Counter : " + counter);
        }
    }


<1> Static instance for Singleton.
<2> Get instance.
<3> Pool size.
<4> Bag for objects in pool.
<5> Lock for thread-safe.
<6> If any object in bag return an object, else throw exception for wait.
<7> If an object released, add this object to pool bag.
<8> Request an object from pool.
<9> Release requested object.
<10> If there is no object in the bag, sleep for 1 second.
----

=== UML Diagram

image::ObjectPool.png[Class1,300,500]

