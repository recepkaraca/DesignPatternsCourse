= Ali Recep KARACA - 160202053
:icons: font
:linkattrs:
:imagesdir:
:data-uri:

== SOLID PRENSİPLERİ
=== Single Responsibility
Her sınıfın tek bir görevi yerine getirmesini, ayrı iş parçacıklarının farklı sınıflara bölünmesi gerektiğini savunan prensiptir. Bir sınıfın yalnızca yeni bir özellik kazandırılacağı zaman değiştirilmesi gerektiğini belirtir. Projede bir değişiklik yapılacağı zaman, değişiklik yapılacak olan sınıfa nelerin bağlı olduğunu, hangi sınıfların etkileneceğini düşünmekten kurtulmamızı sağlar. Aşağıda, bu kurala uymayan bir kod parçacığı verilmiştir.

image::Images/SingleResponsibility.png[Class1,400,300,align="center"]

Şekil üzerindeki koddan da görülebileceği üzere, görevi mail göndermek olan SendMail isimli sınıfa IsMailAddressValid isimli, mail adresinin uygun formatta olup olmadığını denetleyen bir sorumluluk yüklenmiştir. Bu durum single responsibility prensibine uymamaktadır.


=== Open / Closed Principle
Open / Closed prensibi nesnelerin geliştirmeye açık fakat değişime kapalı olması gerektiğini savunan prensiptir. Nesnelerin davranışları değişmiyor olmalı fakat yeni özellik kazanabiliyor olmaları gerekmektedir. Sınıflar ve metotlar oluşturulurken ileride olabilecek istekler ve gelişmeleri öngörerek tasarlamak gerekmektedir. Bu geliştirmeler proje içerisindeki diğer sistemleri etkilememeli, değişikliğe sebep olmamalıdır. Aşağıda, bu kurala uymayan bir örnek verilmiştir.

image::Images/OpenClosed1.png[Class1,500,300,align="center"]
image::Images/OpenClosed2.png[Class1,500,300,align="center"]

Örnekte, logları veri tabanında ve xml de tutan bir program verilmiştir. Bunlardan hangisinin seçileceğine log tipine göre karar vermektedir. Logger sınıfı içerisinde enum type'a göre işlem yapan bir Log fonksiyonu bulunmaktadır. Bu durumda eğer JSON formatında bir veri gelir ise, ilk olarak enum içerisine yeni bir type eklememiz gerekecek, ardından da Logger sınıfı içerisinde bu yeni enum için geliştirme yapılması gerekecektir. Bu durum open / closed prensibine uymamaktadır.

=== Liskov’s Substitution Principle
Yerine geçme prensibi kalıtım alarak türeyen sınıfların kalıtım aldıkları nesnenin tüm özellikleri kullanmalı ve sonrasında kendi özelliklerini barındırmasını hedefleyen bir prensiptir eğer nesne kalıtım aldığı objenin tüm özelliklerini kullanmaz ise ortaya gereksiz kod yığınları oluşur ve sonrasında kalıtım alınan objenin diğerlerinden ayrılması için if else bloklarına ihtiyaç olur ve bu durum son derece verimsiz bir yazılıma sebep olur. Kodlarımızda herhangi bir değişiklik yapmaya gerek duymadan alt sınıfları, türedikleri(üst) sınıfların yerine kullanabilmemiz gerekir. Aşağıda, bu kurala uymayan bir örnek verilmiştir.

image::Images/Liskov1.png[Class1,300,300,align="center"]
image::Images/Liskov2.png[Class1,300,300,align="center"]

Bir adet abstract BasePrinter sınıfı ve bunun içerisinde yine abstract Print ve Scan olmak üzere iki özellik için metod oluşturulmuştur. Abstract sınıfı kalıtan tüm sınıflar bu özellikleri sağlamak zorundadırlar. Fakat bu sınıftan kalıtılarak oluşturulan HP ve Canon sınıflarından HP sınıfı tarama özelliğini sağlamamaktadır ve bu özellik kullanıldığında hata döndürecektir. Bu durum Liskov’s Substitution prensibine uymamaktadır.

=== Interface Segregation Principle
Temel amacı, arayüz implementation sonucunda oluşacak gereksiz kodları önlemek ve kodumuzun daha amaca yönelik hale gelmesini sağlamaktır. Bir arayüze gerektiğinden fazla özellik eklenmemesini, nesnelerin ihtiyaç duymadıkları fonksiyonların arayüzler içerisinden mümkün olduğunda ayrıştırılmasını savunur. Aşağıda bu duruma uymayan bir kod parçacığı verilmiştir.

.InterfaceSegregation.cs
[source,c#]
----
    public interface IGenericRcCommander
    {
        void MoveForward();
        void MoveBack();
        void MoveRight();
        void MoveLeft();
        void MoveUp();
        void MoveDown();
        void StartEngine();
        void StopEngine();
        void SpeedUpEngine();
        void SpeedDownEngine();
        void LoadContainer();
        void DropContainer();
    }

    class RcCarCommanderGeneric : IGenericRcCommander
    {
        public void MoveForward()
        {
            Console.WriteLine("Move forward signal sent to car.");
        }

        public void MoveBack()
        {
            Console.WriteLine("Move back signal sent to car.");
        }

        public void MoveRight()
        {
            Console.WriteLine("Move right signal sent to car.");
        }

        public void MoveLeft()
        {
            Console.WriteLine("Move left signal sent to car.");
        }

        public void StartEngine()
        {
            Console.WriteLine("Start engine signal sent to car.");
        }

        public void StopEngine()
        {
            Console.WriteLine("Stop engine signal sent to car.");
        }

        public void SpeedUpEngine()
        {
            Console.WriteLine("Speed up signal sent to car.");
        }

        public void SpeedDownEngine()
        {
            Console.WriteLine("Speed down signal sent to car.");
        }

        public void MoveUp() { }
        public void MoveDown() { }
        public void LoadContainer() { }
        public void DropContainer() { }
    }
----

Kod içerisinde, bir RC kumandası arayüzü yazılmıştır ve bu arayüzü kullanan bir RC Araba kumandası sınıfı oluşturulmuştur. Burada şu şekilde bir sıkıntı yaşanmıştır; RC kumandasının yazıldığı "IGenericRcCommander" arayüzü uçabilen RC araçlar için kullanılacak olan "MoveUp" ve "MoveDown" fonksiyonlarını içermekte ve yüzebilen RC araçlar için yük alma ve yük indirme sinyali gönderen "LoadContainer" ve "DropContainer" fonksiyonları içermektedir. Bundan dolayı, bu arayüzün kalıtılmış olduğu, sadece karada hareket edecek olan RC araçları kumanda edecek olan "RcCarCommanderGeneric" sınıfında içi doldurulmamış fonksiyonlar bulunmaktadır ve bu durum Interface Segregation prensibine uymamaktadır. Aşağıda, bu kodun Interface Segregation prensibine uygun olarak düzenlenmiş hali mevcuttur.

.InterfaceSegregation.cs
[source,c#]
----
    public interface IBasicRcController <1>
    {
        void MoveForward();
        void MoveBack();
        void MoveRight();
        void MoveLeft();
        void StartEngine();
        void StopEngine();
        void SpeedUpEngine();
        void SpeedDownEngine();
    }

    public interface IFlyableRcController <2>
    {
        void MoveUp();
        void MoveDown();
    }

    public interface IShipRcController <3>
    {
        void LoadContainer();
        void DropContainer();
    }

    class Car { }
    class Ship { }
    class Drone { }

    class RcCarCommander : IBasicRcController <4>
    {
        public Car connectedCar { get; set; }

        public RcCarCommander()
        {
            Console.WriteLine("RC Car Controller Created.");
        }

        public void MoveForward()
        {
            Console.WriteLine("Move forward signal sent to car.");
        }

        public void MoveBack()
        {
            Console.WriteLine("Move back signal sent to car.");
        }

        public void MoveRight()
        {
            Console.WriteLine("Move right signal sent to car.");
        }

        public void MoveLeft()
        {
            Console.WriteLine("Move left signal sent to car.");
        }

        public void StartEngine()
        {
            Console.WriteLine("Start engine signal sent to car.");
        }

        public void StopEngine()
        {
            Console.WriteLine("Stop engine signal sent to car.");
        }

        public void SpeedUpEngine()
        {
            Console.WriteLine("Speed up signal sent to car.");
        }

        public void SpeedDownEngine()
        {
            Console.WriteLine("Speed down signal sent to car.");
        }
    }

    class RcDroneController : IBasicRcController, IFlyableRcController <5>
    {
        public Drone connectedDrone { get; set; }

        public RcDroneController()
        {
            Console.WriteLine("RC Drone Controller Created.");
        }

        public void MoveForward()
        {
            Console.WriteLine("Move forward signal sent to drone.");
        }

        public void MoveBack()
        {
            Console.WriteLine("Move back signal sent to drone.");
        }

        public void MoveRight()
        {
            Console.WriteLine("Move right signal sent to drone.");
        }

        public void MoveLeft()
        {
            Console.WriteLine("Move left signal sent to drone.");
        }

        public void StartEngine()
        {
            Console.WriteLine("Start engine signal sent to drone.");
        }

        public void StopEngine()
        {
            Console.WriteLine("Stop engine signal sent to drone.");
        }

        public void SpeedUpEngine()
        {
            Console.WriteLine("Speed up signal sent to drone.");
        }

        public void SpeedDownEngine()
        {
            Console.WriteLine("Speed down signal sent to drone.");
        }

        public void MoveUp()
        {
            Console.WriteLine("Move up signal sent to drone.");
        }

        public void MoveDown()
        {
            Console.WriteLine("Move down signal sent to drone.");
        }
    }

    class RcShipController : IBasicRcController, IShipRcController <6>
    {
        public Ship connectedShip { get; set; }
        public RcShipController()
        {
            Console.WriteLine("RC Ship Controller Created.");
        }
        public void MoveForward()
        {
            Console.WriteLine("Move forward signal sent to ship.");
        }

        public void MoveBack()
        {
            Console.WriteLine("Move back signal sent to ship.");
        }

        public void MoveRight()
        {
            Console.WriteLine("Move right signal sent to ship.");
        }

        public void MoveLeft()
        {
            Console.WriteLine("Move left signal sent to ship.");
        }

        public void StartEngine()
        {
            Console.WriteLine("Start engine signal sent to ship.");
        }

        public void StopEngine()
        {
            Console.WriteLine("Stop engine signal sent to ship.");
        }

        public void SpeedUpEngine()
        {
            Console.WriteLine("Speed up signal sent to ship.");
        }

        public void SpeedDownEngine()
        {
            Console.WriteLine("Speed down signal sent to ship.");
        }

        public void LoadContainer()
        {
            Console.WriteLine("Load container signal sent to ship.");
        }

        public void DropContainer()
        {
            Console.WriteLine("Drop container signal sent to ship.");
        }
    }
    
    <1> Temel kumanda işlevlerini yerine getiren bir arayüz oluşturulmuştur.
    <2> Uçabilen RC araçların işlevlerini yerine getiren bir arayüz oluşturulmuştur.
    <3> Yüzebilen RC araçların işlevlerini yerine getirebilen bir arayüz oluşturulmuştur.
    <4> RC araba kumandası, araba uçmadığı ve yüzmediği için sadece temel kumanda fonksiyonlarını implemente etmiştir.
    <5> Drone kumandası, temel kumanda ile uçan RC araçların fonksiyonlarını yerine getiren arayüzü birlikte implemente etmiştir.
    <6> RC Gemi kumandası, temel kumanda ile yüzen RC araçlarının fonksiyonlarını yerine getiren arayüzü birikte implemente etmiştir.
----

Kod üzerinde görülebileceği üzere, karada hareket eden, uçabilen ve yüzen RC araç kumandaları için bu fonksiyonlar ayrı arayüzlere bölünmüş, bu arayüzü implemente eden kumanda sınıfları sadece kullanacakları fonksiyonları içeren arayüzleri implemente ederek kodun Interface Segregation prensibine uygun hale gelmesi sağlanmıştır. Kodun çıktısı şu şekildedir:

image::InterfaceSegregation/KodCiktisi.png[Class1,700,300,align="center"]

Kodun UML Diagramı aşağıda verilmiştir.

image::InterfaceSegregation/UML/InterfaceSegregation_UML.png[Class1,300,700,align="center"]

=== Dependency Inversion Principle
Sınıflar arası bağımlılıkların olabildiğinde az olmasını, özellikle üst seviye sınıfların alt seviye sınıflara bağımlı olmaması gerektiğini savunan prensiptir. Burada amaç üst seviyedeki modüllerin alt seviyelere bağımlı olmasından dolayı çıkabilecek sorunları ortadan kaldırmaktır. Yani alt seviyede yapılan herhangi bir değişikliğin üst seviyede kod değişikliğine veya onun bağlılıklarının etkilenmesine engel olmaktır amaç. Aşağıda, bu kurala uymayan bir örnek verilmiştir.

image::Images/DependencyInversion.png[Class1,300,400,align="center"]

Burada, Logger sınıfı içerisinde XmlLog sınıfına ait bir nesne üretilmiştir. Bu durum şu şekilde bir sıkıntı yaratmaktadır; artık Logger sınıfı XmlLog isimli sınıfı tanımaktadır, ilgili bilgilerine sahiptir ve ihtiyaç duyduğunu bilmektedir. İnsanlar Logger içerisinden de XmlLog ile ilgili verileri görebileceklerdir. Bunun yerine bir arayüz kullanılmış olsa idi, insanlar bu arayüz üzerinden erişim sağlayaklardı ve arkada neler döndüğü ile alakalı fikirleri olmayacaktı.

== Tasarım Örüntüleri
=== Memento
Memento Design Pattern, Behavioral tasarım kalıpları gurubunda olan bir tasarım desenidir. Elimizdeki mevcut nesnenin herhangi bir T anındaki durumunu kayda alarak, sonradan oluşabilecek değişiklikler üzerine tekrardan o kaydı elde etmemizi sağlayan bir desendir. İhtiyaç duyulduğu anda nesnelerin farklı halleri arasında geçiş yapılabilmesini mümkün kılar. Aşağıda bir müzik çalar uygulaması verilmiştir. Burada Memento tasarım örüntüsünün kullanılma amacı, müzisk dinleme uygulamasında bir önceki veya kaydı alınan daha önceki parçalara geri dönüş imkanı sağladığı içindir. Kod aşağıdaki gibidir:

.Memento.cs
[source,c#]
----
    class MusicPlayer <1>
    {
        public string MusicName { get; set; }
        public int Duration { get; set; }
        public string Artist { get; set; }
        public int ReleaseYear { get; set; }

        public override string ToString()
        {
            return $"You are currently listening\nMusic Name: {MusicName}\nDuration: {Duration} second\n" +
                $"Artist: {Artist}\nRelease Year: {ReleaseYear}";
        }

        public MusicPlayerMemento Save() <2>
        {
            return new MusicPlayerMemento
            {
                MusicName = this.MusicName,
                Duration = this.Duration,
                Artist = this.Artist,
                ReleaseYear = this.ReleaseYear,
            };
        }

        public void PreviousMusic(MusicPlayerMemento memento) <3>
        {
            this.MusicName = memento.MusicName;
            this.Duration = memento.Duration;
            this.Artist = memento.Artist;
            this.ReleaseYear = memento.ReleaseYear;

            Console.WriteLine("\nGoing back to previous music...\n");
        }
    }

    class MusicPlayerMemento <4>
    {
        public string MusicName { get; set; }
        public int Duration { get; set; }
        public string Artist { get; set; }
        public int ReleaseYear { get; set; }
    }

    class MusicPlayerCareTaker <5>
    {
        public MusicPlayerMemento Memento { get; set; }
    }

    class MementoRun
    {
        static void Main(string[] args)
        {
            MusicPlayer musicPlayer = new MusicPlayer();
            musicPlayer.MusicName = "Moves Like Jagger";
            musicPlayer.Duration = 278;
            musicPlayer.Artist = "Maroon 5";
            musicPlayer.ReleaseYear = 2011;
            Console.WriteLine(musicPlayer.ToString());

            MusicPlayerCareTaker taker = new MusicPlayerCareTaker();
            taker.Memento = musicPlayer.Save(); <6>

            musicPlayer.MusicName = "World Hold On";
            musicPlayer.Duration = 218;
            musicPlayer.Artist = "Bob Sinclar";
            musicPlayer.ReleaseYear = 2006;
            Console.WriteLine("\n" + musicPlayer.ToString());

            musicPlayer.PreviousMusic(taker.Memento); <7>
            Console.WriteLine(musicPlayer.ToString());
        }
    }
    
    <1> Bu sınıf kopyası saklanacak olan nesneyi ifade etmektedir. Bu sınıf, kendi kopyasının oluşturulmasından sorumlu olduğu gibi geri yüklenmesinden de sorumludur.
    <2> Kayıt alma işleminin gerçekleştirildiği fonksiyondur.
    <3> Alınan kaydı geri yükleme işleminin gerçekleştirildiği fonksiyondur.
    <4> Kopyalanacak nesnenin hangi özelliklerinin tutulacağı, bir başka deyişle hangi değerlerinin işleneceğini belirttiğimiz sınıftır.
    <5> Bu sınıf Memento referansını barındırmakta ve yapılacak tüm işlemlerin organizasyonunu sağlamaktadır.
    <6> Daha sonra dönülecek olan müziğin kaydı alınmıştır.
    <7> Kaydı alınan müzik tekrardan çalınmaya başlanmıştır.
----

Aşağıda kodun çıktısı bulunmaktadır. Görülebileceği üzere müzik çalar uygulaması ile "Moves Like Jagger" isimli müziği dinlerken daha sonra "World Hold On" isimli müziğe geçiş yapılmış. Daha sonra Memento tasarım kalıbı ile bir önceki "Moves Like Jagger" isimli müziğe geri dönülmüştür.

image::Memento/KodCiktisi.png[Class1,700,300,align="center"]

Kodun UML Diagramı şu şekildedir:

image::Memento/UML/Memento_UML.png[Class1,400,400,align="center"]

=== Adapter
Adaptör Tasarım deseni, yapısal (structural) türünde olan bir tasarım desenidir. Mevcut bir sınıfı veya arayüz sınıfını, eldeki farklı bir arayüz sınıfına uygun hale getirerek tekrar kullanmak amacıyla uygulanır. Çoğu zaman işe yarayacağını düşündüğümüz mevcut bir sınıfı kendi sistemimizde tekrar kullanmak isteriz. Fakat mevcut sınıf, tam beklediğimiz gibi olmayabilir. Bu durumda araya bir tane adaptör yazarak, mevcut sınıfı kendi sistemimize uygun hale getirebiliriz. Böylece adapte edilen nesnede kod değişikliği olmadan benzer bir arayüzü destekler hale getiririz. Ayrıca adaptasyon işlemi sırasında, adapte edilen nesnenin desteklemediği özellikler de adaptör tarafından gerçekleştirilebilir. Aşağıda, girilen işlemci modelinin bilgilerini alıp, dönen bilgileri adaptör aracılığı ile html kodu içerisinde döndüren bir kod parçacığı verilmiştir. Burada, bu tasarım kalıbının kullanılmasının amacı, istenilen işlemci modelinin bilgilerini döndüren sınıf ile, ekrana bu sınıfın döndürdüğü verileri html kodu içerisinde basacak bir ara sınıf kullanılması gerektiğinden dolayıdır. Adaptör tasarım örüntüsü, istenilen işlemci modeline ait verileri gidip gerekli yerden almakta ve html kodu haline getirerek aracılık görevi görmektedir.

.Adapter.cs
[source,c#]
----
    class CPUs <1>
    {
        public int getCoreCount(string cpu)
        {
            switch(cpu.ToLower())
            {
                case "intel i9 9900k":
                case "intel i7 9700k":
                case "amd ryzen7 3700x":
                    return 8;
                case "amd ryzen5 3600":
                    return 6;
                default:
                    return 0;
            }
        }

        public int getThreadCount(string cpu)
        {
            switch (cpu.ToLower())
            {
                case "intel i9 9900k":
                case "amd ryzen7 3700x":
                    return 16;
                case "intel i7 9700k":
                    return 8;
                case "amd ryzen5 3600":
                    return 12;
                default:
                    return 0;
            }
        }

        public double getBaseClockSpeed(string cpu) 
        {
            switch (cpu.ToLower())
            {
                case "intel i9 9900k":
                case "intel i7 9700k":
                case "amd ryzen7 3700x":
                case "amd ryzen5 3600":
                    return 3.6;
                default:
                    return 0;
            }
        }

        public int getCacheSize(string cpu) 
        {
            switch (cpu.ToLower())
            {
                case "intel i9 9900k":
                    return 16;
                case "intel i7 9700k":
                    return 12;
                case "amd ryzen7 3700x":
                    return 36;
                case "amd ryzen5 3600":
                    return 35;
                default:
                    return 0;
            }
        }

        public int getReleaseYear(string cpu) 
        {
            switch (cpu.ToLower())
            {
                case "intel i9 9900k":
                case "intel i7 9700k":
                    return 2018;
                case "amd ryzen7 3700x":
                case "amd ryzen5 3600":
                    return 2019;
                default:
                    return 0;
            }
        }
    }

    class CPU <2>
    {
        protected string CPUName;
        protected int CoreCount;
        protected int ThreadCount;
        protected double BaseClockSpeed;
        protected int CacheSize;
        protected int ReleaseYear;

        public CPU(string cpu)
        {
            this.CPUName = cpu;
        }

        public virtual void GetData()
        {
            Console.WriteLine("CPU: {0} ------> ", CPUName);

        }
    }

    class CPUInformations : CPU <3>
    {
        private CPUs _cpus;

        public CPUInformations(string cpu) : base(cpu)
        {
        }

        public override void GetData()
        {
            _cpus = new CPUs();

            CoreCount = _cpus.getCoreCount(CPUName);
            ThreadCount = _cpus.getThreadCount(CPUName);
            BaseClockSpeed = _cpus.getBaseClockSpeed(CPUName);
            CacheSize = _cpus.getCacheSize(CPUName);
            ReleaseYear = _cpus.getReleaseYear(CPUName);

            base.GetData();
            Console.WriteLine("<!DOCTYPE html>");
            Console.WriteLine("<html lang='en'>");
            Console.WriteLine("\t<head>");
            Console.WriteLine("\t\t<title>{0}</title>", CPUName);
            Console.WriteLine("\t</head>");
            Console.WriteLine("\t<body>");
            Console.WriteLine("\t\t<div>");
            Console.WriteLine("\t\t\tCore Count: " + CoreCount);
            Console.WriteLine("\t\t\tThread Count: " + ThreadCount);
            Console.WriteLine("\t\t\tCore Count: " + CoreCount);
            Console.WriteLine("\t\t\tBase Clock Speed: " + BaseClockSpeed);
            Console.WriteLine("\t\t\tCache Size: " + CacheSize);
            Console.WriteLine("\t\t\tRelease Year: " + ReleaseYear);
            Console.WriteLine("\t\t</div>");
            Console.WriteLine("\t</body>");
            Console.WriteLine("</html>\n");
        }
    }

    class Client <4>
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Without adapter:");
            CPU cpu = new CPU("INTEL I9 9900K");
            cpu.GetData();
            Console.WriteLine();

            Console.WriteLine("With adapter:");
            CPUInformations intel9900k = new CPUInformations("INTEL I9 9900K");
            intel9900k.GetData();

            CPUInformations intel9700k = new CPUInformations("INTEL I7 9700K");
            intel9700k.GetData();

            CPUInformations amd3700x = new CPUInformations("AMD RYZEN7 3700X");
            amd3700x.GetData();

            CPUInformations amd3600 = new CPUInformations("AMD RYZEN5 3600");
            amd3600.GetData();
        }
    }
    
    <1> Adapte edilecek olan verileri içeren sınıftır. Kendisine gönderilen işlemci modeline ait bilgileri döndürür. (Adaptee class)
    <2> Adaptee sınıfından gelen verilerin çevrilmesi gereken formatın tanımlandığı sınıftır. (Target class)
    <3> Adaptee class ile Target class arasında köprü görevi gören, bilgileri alıp istenildiği formata çeviren adaptör sınıfıdır. (Adapter class)
    <4> Adaptöre çevirmesi gereken işlemci modellerinin iletildiği sınıftır. (Client)
----

Aşağıda kodun çıktısı bulunmaktadır. Görülebileceği üzere işlemci modellerine göre bir veritabanı üzerinden gerekli veriler çekilmiş, daha sonra bu veriler html koduna dönüştürülerek web browser içerisinde gösterilebilecek şekle getirilmiştir. Bu iki işlem arasında adaptör tasarım örüntüsü kullanılmıştır, bu örüntü iki sistem arasında köprü görevi görmüştür.

image::Adapter/KodCiktisi.png[Class1,400,1000,align="center"]

Kodun UML Diagramı şu şekildedir:

image::Adapter/UML/Adapter_UML.png[Class1,400,500,align="center"]