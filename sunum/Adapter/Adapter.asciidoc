= Ali Recep KARACA - 160202053

== Tasarım Örüntüleri
=== Adapter
Adaptör Tasarım deseni, yapısal (structural) türünde olan bir tasarım desenidir. Mevcut bir sınıfı veya arayüz sınıfını, eldeki farklı bir arayüz sınıfına uygun hale getirerek tekrar kullanmak amacıyla uygulanır. Çoğu zaman işe yarayacağını düşündüğümüz mevcut bir sınıfı kendi sistemimizde tekrar kullanmak isteriz. Fakat mevcut sınıf, tam beklediğimiz gibi olmayabilir. Bu durumda araya bir tane adaptör yazarak, mevcut sınıfı kendi sistemimize uygun hale getirebiliriz. Böylece adapte edilen nesnede kod değişikliği olmadan benzer bir arayüzü destekler hale getiririz. Ayrıca adaptasyon işlemi sırasında, adapte edilen nesnenin desteklemediği özellikler de adaptör tarafından gerçekleştirilebilir. Aşağıda, girilen işlemci modelinin bilgilerini alıp, dönen bilgileri adaptör aracılığı ile html kodu içerisinde döndüren bir kod parçacığı verilmiştir. Burada, bu tasarım kalıbının kullanılmasının amacı, istenilen işlemci modelinin bilgilerini döndüren sınıf ile, ekrana bu sınıfın döndürdüğü verileri html kodu içerisinde basacak bir ara sınıf kullanılması gerektiğinden dolayıdır. Adaptör tasarım örüntüsü, istenilen işlemci modeline ait verileri gidip gerekli yerden almakta ve html kodu haline getirerek aracılık görevi görmektedir.

.Adapter.cs
[source,c#]
----
    class CPUs <1>
    {
        public int getCoreCount(string cpu)
        {
            switch(cpu.ToLower())
            {
                case "intel i9 9900k":
                case "intel i7 9700k":
                case "amd ryzen7 3700x":
                    return 8;
                case "amd ryzen5 3600":
                    return 6;
                default:
                    return 0;
            }
        }

        public int getThreadCount(string cpu)
        {
            switch (cpu.ToLower())
            {
                case "intel i9 9900k":
                case "amd ryzen7 3700x":
                    return 16;
                case "intel i7 9700k":
                    return 8;
                case "amd ryzen5 3600":
                    return 12;
                default:
                    return 0;
            }
        }

        public double getBaseClockSpeed(string cpu) 
        {
            switch (cpu.ToLower())
            {
                case "intel i9 9900k":
                case "intel i7 9700k":
                case "amd ryzen7 3700x":
                case "amd ryzen5 3600":
                    return 3.6;
                default:
                    return 0;
            }
        }

        public int getCacheSize(string cpu) 
        {
            switch (cpu.ToLower())
            {
                case "intel i9 9900k":
                    return 16;
                case "intel i7 9700k":
                    return 12;
                case "amd ryzen7 3700x":
                    return 36;
                case "amd ryzen5 3600":
                    return 35;
                default:
                    return 0;
            }
        }

        public int getReleaseYear(string cpu) 
        {
            switch (cpu.ToLower())
            {
                case "intel i9 9900k":
                case "intel i7 9700k":
                    return 2018;
                case "amd ryzen7 3700x":
                case "amd ryzen5 3600":
                    return 2019;
                default:
                    return 0;
            }
        }
    }

    class CPU <2>
    {
        protected string CPUName;
        protected int CoreCount;
        protected int ThreadCount;
        protected double BaseClockSpeed;
        protected int CacheSize;
        protected int ReleaseYear;

        public CPU(string cpu)
        {
            this.CPUName = cpu;
        }

        public virtual void GetData()
        {
            Console.WriteLine("CPU: {0} ------> ", CPUName);

        }
    }

    class CPUInformations : CPU <3>
    {
        private CPUs _cpus;

        public CPUInformations(string cpu) : base(cpu)
        {
        }

        public override void GetData()
        {
            _cpus = new CPUs();

            CoreCount = _cpus.getCoreCount(CPUName);
            ThreadCount = _cpus.getThreadCount(CPUName);
            BaseClockSpeed = _cpus.getBaseClockSpeed(CPUName);
            CacheSize = _cpus.getCacheSize(CPUName);
            ReleaseYear = _cpus.getReleaseYear(CPUName);

            base.GetData();
            Console.WriteLine("<!DOCTYPE html>");
            Console.WriteLine("<html lang='en'>");
            Console.WriteLine("\t<head>");
            Console.WriteLine("\t\t<title>{0}</title>", CPUName);
            Console.WriteLine("\t</head>");
            Console.WriteLine("\t<body>");
            Console.WriteLine("\t\t<div>");
            Console.WriteLine("\t\t\tCore Count: " + CoreCount);
            Console.WriteLine("\t\t\tThread Count: " + ThreadCount);
            Console.WriteLine("\t\t\tCore Count: " + CoreCount);
            Console.WriteLine("\t\t\tBase Clock Speed: " + BaseClockSpeed);
            Console.WriteLine("\t\t\tCache Size: " + CacheSize);
            Console.WriteLine("\t\t\tRelease Year: " + ReleaseYear);
            Console.WriteLine("\t\t</div>");
            Console.WriteLine("\t</body>");
            Console.WriteLine("</html>\n");
        }
    }

    class Client <4>
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Without adapter:");
            CPU cpu = new CPU("INTEL I9 9900K");
            cpu.GetData();
            Console.WriteLine();

            Console.WriteLine("With adapter:");
            CPUInformations intel9900k = new CPUInformations("INTEL I9 9900K");
            intel9900k.GetData();

            CPUInformations intel9700k = new CPUInformations("INTEL I7 9700K");
            intel9700k.GetData();

            CPUInformations amd3700x = new CPUInformations("AMD RYZEN7 3700X");
            amd3700x.GetData();

            CPUInformations amd3600 = new CPUInformations("AMD RYZEN5 3600");
            amd3600.GetData();
        }
    }
    
    <1> Adapte edilecek olan verileri içeren sınıftır. Kendisine gönderilen işlemci modeline ait bilgileri döndürür. (Adaptee class)
    <2> Adaptee sınıfından gelen verilerin çevrilmesi gereken formatın tanımlandığı sınıftır. (Target class)
    <3> Adaptee class ile Target class arasında köprü görevi gören, bilgileri alıp istenildiği formata çeviren adaptör sınıfıdır. (Adapter class)
    <4> Adaptöre çevirmesi gereken işlemci modellerinin iletildiği sınıftır. (Client)
----

Aşağıda kodun çıktısı bulunmaktadır. Görülebileceği üzere işlemci modellerine göre bir veritabanı üzerinden gerekli veriler çekilmiş, daha sonra bu veriler html koduna dönüştürülerek web browser içerisinde gösterilebilecek şekle getirilmiştir. Bu iki işlem arasında adaptör tasarım örüntüsü kullanılmıştır, bu örüntü iki sistem arasında köprü görevi görmüştür.

image::KodCiktisi.png[Class1,400,1000,align="center"]

Kodun UML Diagramı şu şekildedir:

image::UML/Adapter_UML.png[Class1,400,500,align="center"]