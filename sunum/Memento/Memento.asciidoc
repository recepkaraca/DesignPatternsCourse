= Ali Recep KARACA - 160202053

== Tasarım Örüntüleri
=== Memento
Memento Design Pattern, Behavioral tasarım kalıpları gurubunda olan bir tasarım desenidir. Elimizdeki mevcut nesnenin herhangi bir T anındaki durumunu kayda alarak, sonradan oluşabilecek değişiklikler üzerine tekrardan o kaydı elde etmemizi sağlayan bir desendir. İhtiyaç duyulduğu anda nesnelerin farklı halleri arasında geçiş yapılabilmesini mümkün kılar. Aşağıda bir müzik çalar uygulaması verilmiştir. Burada Memento tasarım örüntüsünün kullanılma amacı, müzis dinleme uygulamasında bir önceki veya kaydı alınan daha önceki parçalara geri dönüş imkanı sağladığı içindir. Kod aşağıdaki gibidir:

.Memento.cs
[source,c#]
----
    class MusicPlayer <1>
    {
        public string MusicName { get; set; }
        public int Duration { get; set; }
        public string Artist { get; set; }
        public int ReleaseYear { get; set; }

        public override string ToString()
        {
            return $"You are currently listening\nMusic Name: {MusicName}\nDuration: {Duration} second\n" +
                $"Artist: {Artist}\nRelease Year: {ReleaseYear}";
        }

        public MusicPlayerMemento Save() <2>
        {
            return new MusicPlayerMemento
            {
                MusicName = this.MusicName,
                Duration = this.Duration,
                Artist = this.Artist,
                ReleaseYear = this.ReleaseYear,
            };
        }

        public void PreviousMusic(MusicPlayerMemento memento) <3>
        {
            this.MusicName = memento.MusicName;
            this.Duration = memento.Duration;
            this.Artist = memento.Artist;
            this.ReleaseYear = memento.ReleaseYear;

            Console.WriteLine("\nGoing back to previous music...\n");
        }
    }

    class MusicPlayerMemento <4>
    {
        public string MusicName { get; set; }
        public int Duration { get; set; }
        public string Artist { get; set; }
        public int ReleaseYear { get; set; }
    }

    class MusicPlayerCareTaker <5>
    {
        public MusicPlayerMemento Memento { get; set; }
    }

    class MementoRun
    {
        static void Main(string[] args)
        {
            MusicPlayer musicPlayer = new MusicPlayer();
            musicPlayer.MusicName = "Moves Like Jagger";
            musicPlayer.Duration = 278;
            musicPlayer.Artist = "Maroon 5";
            musicPlayer.ReleaseYear = 2011;
            Console.WriteLine(musicPlayer.ToString());

            MusicPlayerCareTaker taker = new MusicPlayerCareTaker();
            taker.Memento = musicPlayer.Save(); <6>

            musicPlayer.MusicName = "World Hold On";
            musicPlayer.Duration = 218;
            musicPlayer.Artist = "Bob Sinclar";
            musicPlayer.ReleaseYear = 2006;
            Console.WriteLine("\n" + musicPlayer.ToString());

            musicPlayer.PreviousMusic(taker.Memento); <7>
            Console.WriteLine(musicPlayer.ToString());
        }
    }
    
    <1> Bu sınıf kopyası saklanacak olan nesneyi ifade etmektedir. Bu sınıf, kendi kopyasının oluşturulmasından sorumlu olduğu gibi geri yüklenmesinden de sorumludur.
    <2> Kayıt alma işleminin gerçekleştirildiği fonksiyondur.
    <3> Alınan kaydı geri yükleme işleminin gerçekleştirildiği fonksiyondur.
    <4> Kopyalanacak nesnenin hangi özelliklerinin tutulacağı, bir başka deyişle hangi değerlerinin işleneceğini belirttiğimiz sınıftır.
    <5> Bu sınıf Memento referansını barındırmakta ve yapılacak tüm işlemlerin organizasyonunu sağlamaktadır.
    <6> Daha sonra dönülecek olan müziğin kaydı alınmıştır.
    <7> Kaydı alınan müzik tekrardan çalınmaya başlanmıştır.
----

Aşağıda kodun çıktısı bulunmaktadır. Görülebileceği üzere müzik çalar uygulaması ile "Moves Like Jagger" isimli müziği dinlerken daha sonra "World Hold On" isimli müziğe geçiş yapılmış. Daha sonra Memento tasarım kalıbı ile bir önceki "Moves Like Jagger" isimli müziğe geri dönülmüştür.

image::KodCiktisi.png[Class1,700,300,align="center"]

Kodun UML Diagramı şu şekildedir:

image::UML/Memento_UML.png[Class1,400,400,align="center"]
